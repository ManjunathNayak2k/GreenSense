name: Replace Old Code with New

on:
  pull_request:
    branches:
        - main
    types:
        - opened
        - synchronize

jobs:
  replace:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get Updated Code
        id: process-files
        uses: actions/github-script@v5
        env:
          OPENAI_API_KEY : ${{ secrets.OPENAI_API_KEY }}
        with:
          script: |
            const https = require('https');
            
            let apiKey = process.env.OPENAI_API_KEY
            let bearerToken = `Bearer ${apiKey}`

            const { owner, repo, number } = context.issue;

            // Get the list of files changed in the PR
            const { data: files } = await github.rest.pulls.listFiles({
              owner, repo, pull_number: number
            });

            const updatedFiles = [];
            const fs = require('fs');

            for (const file of files) {
              // Read file contents
              const fileContent = fs.readFileSync(file.filename, 'utf8');

              // Use the built-in http request function
              const requestData = {
                model: "gpt-3.5-turbo",
                temperature: 0.1,
                messages: [
                  {
                    role: "system",
                    content: "Your task is to optimize the provided code ..."
                  },
                  {
                    role: "user",
                    content: "Optimize this code: " + fileContent
                  }
                ]
              };
        
              const options = {
                hostname: 'api.openai.com',
                path: '/v1/chat/completions',
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': bearerToken,
                  'Content-Length': Buffer.byteLength(JSON.stringify(requestData))
                }
              };

              const req = https.request(options, res => {
                let responseBody = '';

                res.on('data', chunk => {
                  responseBody += chunk;
                });

                res.on('end', () => {
                  // GPT response

                  const response = JSON.parse(responseBody);
                  const chatResponse = response.choices[0].message.content;
                  console.log(response)
                  console.log('---------------')
                  console.log(chatResponse)
                  const code_regex = /\[CODE_START\]([\s\S]*?)\[CODE_END\]/;
                  const explanation_regex = /\[EXPLANATION_START\]([\s\S]*?)\[EXPLANATION_END\]/;

                  const codeMatch = chatResponse.match(code_regex);
                  const explanationMatch = chatResponse.match(explanation_regex);

                  let updatedCode = fileContent
                  let explanation = 'No explanation'

                  if (codeMatch && codeMatch[1]) {
                      updatedCode = codeMatch[1];
                      console.log(updatedCode); 
                  } else {
                      console.log("No code found");
                  }

                  if (explanationMatch && explanationMatch[1]) {
                      explanation = explanationMatch[1];
                      console.log(explanation); 
                  } else {
                      console.log("No explanation found");
                  }

                  // Write new content to file
                  fs.writeFileSync(file.filename, updatedCode, 'utf8');

                  updatedFiles.push({ path: file.filename, explanation: explanation });
                });
              });

              req.on('error', error => {
                console.error(error);
              });

              req.write(JSON.stringify(requestData));
              req.end();

            }
            
            console.log("::set-output name=updatedFiles::" + JSON.stringify(updatedFiles));
            env:
              FILES: ${{ toJson(github.event.pull_request.changed_files) }}
      
      # - name: Commit and Push to New Branch
      #   run: |
      #       # Extract the source branch name
      #       SOURCE_BRANCH=$GITHUB_HEAD_REF
      #       NEW_BRANCH="optimised-$SOURCE_BRANCH"

      #       # Create and switch to the new branch
      #       git checkout -b $NEW_BRANCH

      #       # Set git user details
      #       git config user.name "GitHub Action"
      #       git config user.email "action@github.com"

      #       # Add and commit changes
      #       git add -A
      #       git commit -m "Replaced old code with new code from API" || echo "No changes to commit"

      #       # Use GITHUB_TOKEN for authentication
      #       git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      #       # Push changes
      #       git push --set-upstream origin $NEW_BRANCH || echo "No changes to push"
    
      # - name: Create PR and Comment
      #   uses: actions/github-script@v5
      #   with:
      #     script: |
      #       const sourceBranch = context.payload.pull_request.head.ref; 
      #       const optimisedBranch = `optimised-${sourceBranch}`;

      #       // Create a PR
      #       const pr = await github.rest.pulls.create({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           title: `Optimised changes for ${sourceBranch}`,
      #           head: optimisedBranch, // "optimised-testbranch"
      #           base: sourceBranch, // "testbranch"
      #           body: "This PR contains optimised code."
      #       });

      #       const updatedFiles = JSON.parse(`${{ steps.process-files.outputs.updatedFiles }}`);

      #       // Combine explanations and create a comment on the new PR
      #       const explanations = updatedFiles.map(file => `File: ${file.path}\nExplanation: ${file.explanation}`).join("\n\n");
            
      #       await github.rest.issues.createComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           issue_number: pr.data.number,
      #           body: explanations
      #       });
